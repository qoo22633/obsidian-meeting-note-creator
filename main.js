/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MeetingNoteCreatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  meetingTemplateFolder: "Templates/Meetings",
  defaultTemplate: "default-meeting"
};
var MeetingNoteCreatorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("calendar-plus", "Create Meeting Note", (evt) => {
      new MeetingNoteModal(this.app, this).open();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Meeting Note Creator");
    this.addCommand({
      id: "create-meeting-note",
      name: "Create Meeting Note",
      callback: () => {
        new MeetingNoteModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "insert-meeting-template",
      name: "Insert Meeting Template",
      editorCallback: (editor, view) => {
        this.insertMeetingTemplate(editor);
      }
    });
    this.addSettingTab(new MeetingNoteSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async createMeetingNote(title, participants, agenda) {
    const now = (0, import_obsidian.moment)();
    const dateString = now.format("YYYY-MM-DD");
    const timeString = now.format("HH:mm");
    const fileName = `${dateString} - ${title}.md`;
    const folderPath = this.settings.meetingTemplateFolder;
    if (!await this.app.vault.adapter.exists(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
    const filePath = `${folderPath}/${fileName}`;
    const content = this.generateMeetingNoteContent(title, dateString, timeString, participants, agenda);
    try {
      const file = await this.app.vault.create(filePath, content);
      await this.app.workspace.getLeaf().openFile(file);
      new import_obsidian.Notice(`Meeting note created: ${fileName}`);
    } catch (error) {
      new import_obsidian.Notice("Error creating meeting note: " + error.message);
    }
  }
  generateMeetingNoteContent(title, date, time, participants, agenda) {
    let content = `# ${title}

`;
    content += `**Date:** ${date}
`;
    content += `**Time:** ${time}
`;
    content += `**Participants:**
`;
    participants.forEach((participant) => {
      content += `- ${participant}
`;
    });
    content += `
## Agenda
`;
    agenda.forEach((item, index) => {
      content += `${index + 1}. ${item}
`;
    });
    content += `
## Notes

`;
    content += `## Action Items

`;
    content += `- [ ] 

`;
    content += `## Next Steps

`;
    return content;
  }
  insertMeetingTemplate(editor) {
    const template = `## Meeting Notes

**Date:** ${(0, import_obsidian.moment)().format("YYYY-MM-DD")}
**Time:** ${(0, import_obsidian.moment)().format("HH:mm")}
**Participants:**
- 

## Agenda
1. 

## Notes


## Action Items
- [ ] 

## Next Steps

`;
    editor.replaceSelection(template);
  }
};
var MeetingNoteModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.title = "";
    this.participants = [""];
    this.agenda = [""];
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Create Meeting Note" });
    new import_obsidian.Setting(contentEl).setName("Meeting Title").setDesc("Enter the title of the meeting").addText((text) => text.setPlaceholder("Weekly Team Standup").setValue(this.title).onChange(async (value) => {
      this.title = value;
    }));
    const participantsDiv = contentEl.createDiv();
    participantsDiv.createEl("h3", { text: "Participants" });
    const addParticipantBtn = participantsDiv.createEl("button", { text: "Add Participant" });
    addParticipantBtn.onclick = () => {
      this.participants.push("");
      this.refreshParticipants(participantsDiv);
    };
    this.refreshParticipants(participantsDiv);
    const agendaDiv = contentEl.createDiv();
    agendaDiv.createEl("h3", { text: "Agenda" });
    const addAgendaBtn = agendaDiv.createEl("button", { text: "Add Agenda Item" });
    addAgendaBtn.onclick = () => {
      this.agenda.push("");
      this.refreshAgenda(agendaDiv);
    };
    this.refreshAgenda(agendaDiv);
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Create Meeting Note").setCta().onClick(async () => {
      if (this.title) {
        await this.plugin.createMeetingNote(
          this.title,
          this.participants.filter((p) => p.trim() !== ""),
          this.agenda.filter((a) => a.trim() !== "")
        );
        this.close();
      } else {
        new import_obsidian.Notice("Please enter a meeting title");
      }
    }));
  }
  refreshParticipants(container) {
    const existingInputs = container.querySelectorAll(".participant-input");
    existingInputs.forEach((input) => input.remove());
    this.participants.forEach((participant, index) => {
      const inputDiv = container.createDiv({ cls: "participant-input" });
      const input = inputDiv.createEl("input", {
        type: "text",
        placeholder: "Participant name",
        value: participant
      });
      input.oninput = () => {
        this.participants[index] = input.value;
      };
      const removeBtn = inputDiv.createEl("button", { text: "Remove" });
      removeBtn.onclick = () => {
        this.participants.splice(index, 1);
        this.refreshParticipants(container);
      };
    });
  }
  refreshAgenda(container) {
    const existingInputs = container.querySelectorAll(".agenda-input");
    existingInputs.forEach((input) => input.remove());
    this.agenda.forEach((item, index) => {
      const inputDiv = container.createDiv({ cls: "agenda-input" });
      const input = inputDiv.createEl("input", {
        type: "text",
        placeholder: "Agenda item",
        value: item
      });
      input.oninput = () => {
        this.agenda[index] = input.value;
      };
      const removeBtn = inputDiv.createEl("button", { text: "Remove" });
      removeBtn.onclick = () => {
        this.agenda.splice(index, 1);
        this.refreshAgenda(container);
      };
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MeetingNoteSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Meeting Template Folder").setDesc("Folder where meeting notes will be created").addText((text) => text.setPlaceholder("Templates/Meetings").setValue(this.plugin.settings.meetingTemplateFolder).onChange(async (value) => {
      this.plugin.settings.meetingTemplateFolder = value;
      await this.plugin.saveSettings();
    }));
  }
};
